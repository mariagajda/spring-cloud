server:
  port: 20000
spring:
  cloud:
    function:
      definition: paymentEventsConsumer
    stream:
      bindings:
        paymentEventsConsumer-in-0:
          destination: payment-events
          group: ${random.uuid} #shop
#    stream:
#      bindings:
#        productsListener-in-0:
#          destination: products-events
#          group: shop
#          binder: kafka1
#      binders:
#        kafka1:
#          type: kafka
#          environment:
#            spring:
#              cloud:
#                stream:
#                  kafka:
#                    binder:
#                      brokers: localhost:9092
api:
  payments: http://PAYMENTS-SERVICE/payments
discount: "{cipher}b8fe00fe431ce1eaf7b62bbfc93569dcc0258206fd2c0f3c922431f3e453f0e4"
resilience4j.retry:
  instances:
    payments:
      maxAttempts: 3
      waitDuration: 10s
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      retryExceptions:
        - java.lang.RuntimeException
